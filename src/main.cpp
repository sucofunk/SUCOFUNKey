/* ----------------------------------------------------------------------------------------------

    SUCOFUNKey

    This project is the firmware - named SUCOFUNKey - for Beatmaker's Sketchbook from SUCOFUNK. 

    For more information, check out www.sucofunk.com

    To support the development of this firmware, please donate to the project and buy hardware
    from sucofunk.com.

    Copyright 2021-2024 by Marc Berendes (marc @ sucofunk.com)
    
   ----------------------------------------------------------------------------------------------

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.    

   ---------------------------------------------------------------------------------------------- */

#include <Arduino.h>
#include "hardware/Configuration.h"
#include "helper/AudioResources.h"
#include "hardware/Sucofunkey.h"
#include "helper/FSIO.h"
#include "helper/SampleFSIO.h"
#include "gui/Screen.h"
#include "gui/screens/StartupScreen.h"
#include "context/home/Home.h" 
#include "context/sampler/Sampler.h" 
#include "context/sequencer/Sequencer.h"
#include "context/sequencer/Play.h"
#include "context/sequencer/Snippets.h"
#include "context/arrange/Arrange.h"
#include "context/live/Live.h"
#include "context/settings/Settings.h"
#include "context/recorder/Recorder.h"
#include "context/check/Check.h"
#include "context/synthcopy/SynthCopy.h"
#include <Audio.h>
#include <MIDI.h>

#ifdef SCREEN_ILI9341
    #include <Adafruit_ILI9341.h>
#endif 

#ifdef SCREEN_ILI9341_DMA
    #include "hardware/ILI9341/ILI9341_t3n.h"
#endif 

#ifdef SCREEN_ST7789
    #include <Adafruit_ST7789.h>
#endif

float volumeValue = 0;
float volumeTempValue = 0;

// ToDo: make configurable
byte MIDI_channel_Piano = 2;   // Channel 2 for triggering chromatically pitched samples in live mode (piano)
byte MIDI_channel_Live = 1;    // Channel 1 for triggering Samples

MIDI_CREATE_INSTANCE(HardwareSerial, Serial1, MIDI);

// Function definitions
void handleKeyboardEventQueue(void);
void changeContext(byte context);

enum AppContext {
  HOME = 0, SAMPLER = 1, SEQUENCER = 2, SYNTH = 3, LIVE = 4, SETTINGS = 5, STARTUP = 6, RECORDER = 7, SYSTEMCHECK = 8, ARRANGE = 9, SYNTHCOPY = 10
};

AppContext currentAppContext; // stores the current active "module" context (HOME|SAMPLER|...)
AppContext lastAppContext;

char songsBasePath[8] = "/SONGS/";
char activeSongName[9];
char activeSongPath[21];

// Sample Memory initialization - one psram chip with 8mb added to teensy board
//EXTMEM unsigned int extmemArray[2097152]; // 8mb
EXTMEM unsigned int extmemArray[4194304]; //  16mb

// Interval Timer for playback pattern, metronome, etc..
IntervalTimer globalTickTimer;
volatile boolean ticked = false;
long globalTickInterval = 1000000; // intervall in microseconds -> starts at 1s
long globalTickIntervalNew;
void globalTick();

// Interval Timer for recording
IntervalTimer globalTickTimerRec;
volatile boolean tickedRec = false;
long globalTickIntervalRec = 1000000; // intervall in microseconds -> starts at 1s
long globalTickIntervalRecNew;
void globalTickRec();

AudioResources audioResources;

// LCD Screen
#ifdef SCREEN_ILI9341
    Adafruit_ILI9341 tft(&SPI1, PIN_SCREEN_DC, PIN_SCREEN_CS, PIN_SCREEN_RST);  
#endif 

#ifdef SCREEN_ILI9341_DMA
    ILI9341_t3n tft(PIN_SCREEN_CS, PIN_SCREEN_DC, PIN_SCREEN_RST, PIN_SCREEN_MOSI, PIN_SCREEN_SCK, PIN_SCREEN_DC);
#endif 

#ifdef SCREEN_ST7789
    Adafruit_ST7789 tft(&SPI1, PIN_SCREEN_CS, PIN_SCREEN_DC, PIN_SCREEN_RST);
#endif


// Initializing the "keyboard"
Sucofunkey keyboard(PIN_SUCOKEY_INT_1, PIN_SUCOKEY_INT_2, PIN_SUCOKEY_INT_3, PIN_SUCOKEY_INT_4, PIN_SUCOKEY_INT_5);

// Initializing GUI System
Screen screen(&tft, PIN_SCREEN_BL, 255);

FSIO fsio;
// store the filenames from /SAMPLES from the SD card in this array for fast access
DMAMEM FSIO::LibrarySample librarySamples[1024]; // do not change the size, as is used hardcoded in FSIO for cleaning the array

SampleFSIO sfsio(extmemArray, sizeof(extmemArray), &screen);

Play playContext(&keyboard, &fsio, &sfsio, extmemArray, &audioResources);

Home  homeContext(&keyboard, &screen, activeSongPath, activeSongName);
Sampler samplerContext(&keyboard, &screen, &fsio, &sfsio, &audioResources);
Recorder recorderContext(&keyboard, &screen, &fsio, &sfsio, &audioResources);
Sequencer sequencerContext(&keyboard, &screen, &fsio, &sfsio, &playContext);

Arrange arrangeContext(&keyboard, &screen, &fsio, &sfsio, extmemArray, &audioResources, &playContext);
Live liveContext(&keyboard, &screen, &fsio, &sfsio, &playContext);

Settings settingsContext(&keyboard, &screen);
StartupScreen startupContext(&keyboard, &screen, &fsio, activeSongName);

Check systemCheckContext(&keyboard, &screen);

SynthCopy synthCopyContext(&keyboard, &screen, &fsio, &sfsio, &playContext);

// --- START Audio Connections
// unfortunately this is not initializable in the AudioResources class?!?

AudioConnection          patchCord001(audioResources.playMem1, 0, audioResources.mixerMem1L, 0);
AudioConnection          patchCord002(audioResources.playMem1, 0, audioResources.mixerMem1R, 0);
AudioConnection          patchCord003(audioResources.playMem2, 0, audioResources.mixerMem1L, 1);
AudioConnection          patchCord004(audioResources.playMem2, 0, audioResources.mixerMem1R, 1);
AudioConnection          patchCord005(audioResources.playMem3, 0, audioResources.mixerMem1L, 2);
AudioConnection          patchCord006(audioResources.playMem3, 0, audioResources.mixerMem1R, 2);
AudioConnection          patchCord007(audioResources.playMem4, 0, audioResources.mixerMem1L, 3);
AudioConnection          patchCord008(audioResources.playMem4, 0, audioResources.mixerMem1R, 3);
AudioConnection          patchCord009(audioResources.playMem5, 0, audioResources.mixerMem2L, 0);
AudioConnection          patchCord010(audioResources.playMem5, 0, audioResources.mixerMem2R, 0);
AudioConnection          patchCord011(audioResources.playMem6, 0, audioResources.mixerMem2L, 1);
AudioConnection          patchCord012(audioResources.playMem6, 0, audioResources.mixerMem2R, 1);
AudioConnection          patchCord013(audioResources.playMem7, 0, audioResources.mixerMem2L, 2);
AudioConnection          patchCord014(audioResources.playMem7, 0, audioResources.mixerMem2R, 2);
AudioConnection          patchCord015(audioResources.playMem8, 0, audioResources.mixerMem2L, 3);
AudioConnection          patchCord016(audioResources.playMem8, 0, audioResources.mixerMem2R, 3);
AudioConnection          patchCord017(audioResources.playMem9, 0, audioResources.mixerMem3L, 0);
AudioConnection          patchCord018(audioResources.playMem9, 0, audioResources.mixerMem3R, 0);
AudioConnection          patchCord019(audioResources.playMem10, 0, audioResources.mixerMem3L, 1);
AudioConnection          patchCord020(audioResources.playMem10, 0, audioResources.mixerMem3R, 1);
AudioConnection          patchCord021(audioResources.playMem11, 0, audioResources.mixerMem3L, 2);
AudioConnection          patchCord022(audioResources.playMem11, 0, audioResources.mixerMem3R, 2);
AudioConnection          patchCord023(audioResources.playMem12, 0, audioResources.mixerMem3L, 3);
AudioConnection          patchCord024(audioResources.playMem12, 0, audioResources.mixerMem3R, 3);
AudioConnection          patchCord025(audioResources.playMem13, 0, audioResources.mixerMem4L, 0);
AudioConnection          patchCord026(audioResources.playMem13, 0, audioResources.mixerMem4R, 0);
AudioConnection          patchCord027(audioResources.playMem14, 0, audioResources.mixerMem4L, 1);
AudioConnection          patchCord028(audioResources.playMem14, 0, audioResources.mixerMem4R, 1);
AudioConnection          patchCord029(audioResources.playMem15, 0, audioResources.mixerMem4L, 2);
AudioConnection          patchCord030(audioResources.playMem15, 0, audioResources.mixerMem4R, 2);
AudioConnection          patchCord031(audioResources.playMem16, 0, audioResources.mixerMem4L, 3);
AudioConnection          patchCord032(audioResources.playMem16, 0, audioResources.mixerMem4R, 3);


AudioConnection          patchCord033(audioResources.playSdRaw, 0, audioResources.mixerSDL, 0);
AudioConnection          patchCord034(audioResources.playSdRaw, 0, audioResources.mixerSDR, 0);

AudioConnection          patchCord035(audioResources.playMem, 0, audioResources.mixerSDL, 1);
AudioConnection          patchCord036(audioResources.playMem, 0, audioResources.mixerSDR, 1);

AudioConnection          patchCord037(audioResources.mixerSDL, 0, audioResources.mixerPreOutL, 2);
AudioConnection          patchCord038(audioResources.mixerSDR, 0, audioResources.mixerPreOutR, 2);

AudioConnection          patchCord039(audioResources.recordMixer, audioResources.queue1);
AudioConnection          patchCord040(audioResources.recordMixer, audioResources.peak1);

AudioConnection          patchCord041(audioResources.audioInput, 0, audioResources.recordMixer, 0);
AudioConnection          patchCord042(audioResources.audioInput, 0, audioResources.mixerOutL, 0);
AudioConnection          patchCord043(audioResources.audioInput, 1, audioResources.recordMixer, 1);
AudioConnection          patchCord044(audioResources.audioInput, 1, audioResources.mixerOutR, 0);


AudioConnection          patchCord045(audioResources.mixerMem1L, 0, audioResources.mixerMemL, 0);
AudioConnection          patchCord046(audioResources.mixerMem1R, 0, audioResources.mixerMemR, 0);
AudioConnection          patchCord047(audioResources.mixerMem2L, 0, audioResources.mixerMemL, 1);
AudioConnection          patchCord048(audioResources.mixerMem2R, 0, audioResources.mixerMemR, 1);
AudioConnection          patchCord049(audioResources.mixerMem3L, 0, audioResources.mixerMemL, 2);
AudioConnection          patchCord050(audioResources.mixerMem3R, 0, audioResources.mixerMemR, 2);
AudioConnection          patchCord051(audioResources.mixerMem4L, 0, audioResources.mixerMemL, 3);
AudioConnection          patchCord052(audioResources.mixerMem4R, 0, audioResources.mixerMemR, 3);

AudioConnection          patchCord053(audioResources.mixerMem5L, 0, audioResources.mixerMemLiveL, 0);
AudioConnection          patchCord054(audioResources.mixerMem5R, 0, audioResources.mixerMemLiveR, 0);
AudioConnection          patchCord055(audioResources.mixerMem6L, 0, audioResources.mixerMemLiveL, 1);
AudioConnection          patchCord056(audioResources.mixerMem6R, 0, audioResources.mixerMemLiveR, 1);

AudioConnection          patchCord057(audioResources.mixerMemL, 0, audioResources.mixerPreOutL, 0);
AudioConnection          patchCord058(audioResources.mixerMemR, 0, audioResources.mixerPreOutR, 0);

AudioConnection          patchCord059(audioResources.mixerMemLiveL, 0, audioResources.mixerPreOutL, 1);
AudioConnection          patchCord060(audioResources.mixerMemLiveR, 0, audioResources.mixerPreOutR, 1);

AudioConnection          patchCord061(audioResources.mixerPreOutL, 0, audioResources.recordMixer, 2);
AudioConnection          patchCord062(audioResources.mixerPreOutL, 0, audioResources.mixerOutL, 1);
AudioConnection          patchCord063(audioResources.mixerPreOutR, 0, audioResources.recordMixer, 3);
AudioConnection          patchCord064(audioResources.mixerPreOutR, 0, audioResources.mixerOutR, 1);

AudioConnection          patchCord065(audioResources.mixerOutL, 0, audioResources.audioOutput, 0);
AudioConnection          patchCord066(audioResources.mixerOutR, 0, audioResources.audioOutput, 1);

AudioConnection          patchCord067(audioResources.playMemLive1, 0, audioResources.mixerMem5L, 0);
AudioConnection          patchCord068(audioResources.playMemLive1, 0, audioResources.mixerMem5R, 0);
AudioConnection          patchCord069(audioResources.playMemLive2, 0, audioResources.mixerMem5L, 1);
AudioConnection          patchCord070(audioResources.playMemLive2, 0, audioResources.mixerMem5R, 1);
AudioConnection          patchCord071(audioResources.playMemLive3, 0, audioResources.mixerMem5L, 2);
AudioConnection          patchCord072(audioResources.playMemLive3, 0, audioResources.mixerMem5R, 2);
AudioConnection          patchCord073(audioResources.playMemLive4, 0, audioResources.mixerMem5L, 3);
AudioConnection          patchCord074(audioResources.playMemLive4, 0, audioResources.mixerMem5R, 3);
AudioConnection          patchCord075(audioResources.playMemLive5, 0, audioResources.mixerMem6L, 0);
AudioConnection          patchCord076(audioResources.playMemLive5, 0, audioResources.mixerMem6R, 0);
AudioConnection          patchCord077(audioResources.playMemLive6, 0, audioResources.mixerMem6L, 1);
AudioConnection          patchCord078(audioResources.playMemLive6, 0, audioResources.mixerMem6R, 1);
AudioConnection          patchCord079(audioResources.playMemLive7, 0, audioResources.mixerMem6L, 2);
AudioConnection          patchCord080(audioResources.playMemLive7, 0, audioResources.mixerMem6R, 2);
AudioConnection          patchCord081(audioResources.playMemLive8, 0, audioResources.mixerMem6L, 3);
AudioConnection          patchCord082(audioResources.playMemLive8, 0, audioResources.mixerMem6R, 3);

// next patchcord nr: 084

// --- END of AudioConnections

// Images converted at http://javl.github.io/image2cpp/

// --- SUCOFUNK Logo / 320x54px 
const unsigned char startup_logo[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x7f, 
	0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xfc, 0x00, 0x03, 0xff, 0x00, 0x01, 0xff, 0x80, 0x00, 0x7f, 0xff, 0x80, 0x00, 
	0x00, 0x7f, 0xff, 0xc0, 0x00, 0xfe, 0x01, 0xff, 0x87, 0xff, 0x00, 0x03, 0xff, 0x80, 0xff, 0xc1, 
	0xff, 0xc0, 0x00, 0x30, 0x0c, 0x00, 0x3f, 0xff, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x07, 0xff, 0x80, 
	0x03, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x01, 0xfe, 0x01, 0xff, 
	0x87, 0xff, 0x00, 0x03, 0xff, 0x80, 0xff, 0xcf, 0xff, 0xf8, 0x00, 0x30, 0x0c, 0x00, 0x7f, 0xfe, 
	0x00, 0x78, 0x00, 0x01, 0xc0, 0x06, 0x01, 0x00, 0x03, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x78, 0x00, 
	0x0f, 0x00, 0x00, 0x3c, 0x01, 0x80, 0x00, 0x01, 0x8c, 0x03, 0x00, 0x06, 0x01, 0x81, 0x80, 0xdc, 
	0x00, 0x1c, 0x00, 0x30, 0x0c, 0x00, 0xe0, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0x70, 0x06, 0x03, 0x00, 
	0x03, 0x00, 0x80, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x0e, 0x01, 0x80, 0x00, 0x01, 
	0x8c, 0x03, 0x00, 0x06, 0x01, 0x81, 0x80, 0xf8, 0x00, 0x06, 0x00, 0x30, 0x08, 0x01, 0x80, 0x38, 
	0x01, 0x80, 0x00, 0x00, 0x38, 0x04, 0x03, 0x00, 0x02, 0x01, 0x80, 0x30, 0x00, 0x00, 0x06, 0x00, 
	0x30, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x01, 0x8c, 0x03, 0x00, 0x06, 0x01, 0x81, 0x80, 0xe0, 
	0x00, 0x03, 0x00, 0x30, 0x18, 0x03, 0x00, 0x70, 0x03, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x03, 0x00, 
	0x06, 0x01, 0x80, 0x60, 0x00, 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x01, 0x83, 0x00, 0x00, 0x01, 
	0x8c, 0x02, 0x00, 0x06, 0x01, 0x01, 0x80, 0xc0, 0x00, 0x01, 0x80, 0x20, 0x18, 0x0e, 0x00, 0xe0, 
	0x06, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x03, 0x00, 0x06, 0x01, 0x80, 0xc0, 0x00, 0x00, 0x03, 0x00, 
	0xc0, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x06, 0x03, 0x01, 0x80, 0x80, 
	0x00, 0x01, 0x80, 0x60, 0x18, 0x1c, 0x01, 0x80, 0x06, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x03, 0x00, 
	0x06, 0x01, 0x81, 0x80, 0x00, 0x00, 0x01, 0x81, 0x80, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x03, 
	0x08, 0x06, 0x00, 0x04, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x18, 0x38, 0x03, 0x00, 
	0x0c, 0x00, 0xff, 0xe0, 0x04, 0x0c, 0x02, 0x00, 0x06, 0x01, 0x01, 0x80, 0x0f, 0xf8, 0x01, 0x81, 
	0x80, 0x0f, 0xf8, 0x00, 0x63, 0x00, 0x00, 0x03, 0x18, 0x06, 0x00, 0x0c, 0x03, 0x03, 0x00, 0x03, 
	0xf8, 0x00, 0xc0, 0x60, 0x18, 0x70, 0x06, 0x00, 0x0c, 0x03, 0xff, 0xf0, 0x04, 0x0c, 0x06, 0x00, 
	0x06, 0x03, 0x03, 0x00, 0x7f, 0xfc, 0x00, 0x83, 0x00, 0x3f, 0xfe, 0x00, 0x63, 0xfc, 0x03, 0xff, 
	0x18, 0x06, 0x00, 0x0c, 0x03, 0x03, 0x00, 0x0f, 0xfe, 0x00, 0xc0, 0x60, 0x10, 0xc0, 0x1c, 0x00, 
	0x0c, 0x03, 0x00, 0x18, 0x04, 0x08, 0x06, 0x00, 0x04, 0x03, 0x03, 0x00, 0xe0, 0x06, 0x00, 0x83, 
	0x00, 0xe0, 0x03, 0x00, 0x63, 0xfc, 0x07, 0xfe, 0x18, 0x06, 0x00, 0x0c, 0x03, 0x03, 0x00, 0x3c, 
	0x03, 0x00, 0x40, 0x60, 0x31, 0x80, 0x38, 0x00, 0x08, 0x06, 0x00, 0x1f, 0xfc, 0x18, 0x06, 0x00, 
	0x0c, 0x03, 0x06, 0x00, 0xc0, 0x03, 0x00, 0xc6, 0x00, 0xc0, 0x01, 0x80, 0x60, 0x08, 0x06, 0x00, 
	0x18, 0x04, 0x00, 0x0c, 0x02, 0x03, 0x00, 0x70, 0x03, 0x00, 0x40, 0x40, 0x33, 0x00, 0x70, 0x00, 
	0x18, 0x06, 0x00, 0x1f, 0xfc, 0x18, 0x06, 0x00, 0x0c, 0x03, 0x06, 0x01, 0x80, 0x03, 0x00, 0xc6, 
	0x01, 0x80, 0x01, 0x80, 0x60, 0x18, 0x06, 0x00, 0x10, 0x0c, 0x00, 0x0c, 0x06, 0x02, 0x00, 0x60, 
	0x01, 0x00, 0xc0, 0xc0, 0x3e, 0x00, 0xc0, 0x00, 0x18, 0x07, 0x80, 0x00, 0x00, 0x18, 0x06, 0x00, 
	0x0c, 0x03, 0x06, 0x01, 0x00, 0x03, 0x00, 0x86, 0x03, 0x00, 0x01, 0x80, 0x60, 0x18, 0x06, 0x00, 
	0x30, 0x0c, 0x00, 0x08, 0x06, 0x06, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0xc0, 0x3c, 0x01, 0x80, 0x00, 
	0x1f, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x0f, 0xfe, 0x07, 0xff, 0x00, 0x03, 0xff, 0x8f, 
	0xff, 0x00, 0x01, 0xff, 0xe0, 0x1f, 0xfe, 0x00, 0x3f, 0xfc, 0x00, 0x1f, 0xfe, 0x07, 0xff, 0x80, 
	0x01, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0x7f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 
	0x0f, 0xfe, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x01, 0xff, 0xe0, 0x1f, 0xfc, 0x00, 
	0x3f, 0xec, 0x00, 0x1f, 0xfe, 0x07, 0xfd, 0x80, 0x03, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x00, 
	0x08, 0x00, 0x01, 0xfe, 0x00, 0x30, 0x0c, 0x00, 0x08, 0x06, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x0c, 
	0x03, 0x00, 0x01, 0x80, 0x60, 0x10, 0x0c, 0x00, 0x30, 0x08, 0x00, 0x18, 0x06, 0x06, 0x01, 0x00, 
	0x03, 0x00, 0xc0, 0x80, 0x00, 0x1c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0f, 0x80, 0x30, 0x0c, 0x00, 
	0x18, 0x06, 0x0c, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x01, 0x80, 0x60, 0x30, 0x0c, 0x00, 
	0x30, 0x18, 0x00, 0x18, 0x04, 0x06, 0x03, 0x00, 0x03, 0x00, 0xc0, 0x80, 0x00, 0x0c, 0x00, 0x00, 
	0x07, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xfc, 0x00, 0x1f, 0xfe, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x0f, 
	0xfe, 0x00, 0x01, 0xff, 0xc0, 0x3f, 0xfc, 0x00, 0x3f, 0xf8, 0x00, 0x1f, 0xfc, 0x07, 0xff, 0x00, 
	0x03, 0xff, 0x81, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xe8, 0x00, 
	0x1f, 0xf6, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x01, 0xff, 0xc0, 0x3f, 0xfc, 0x00, 
	0x7f, 0xf8, 0x00, 0x1f, 0xfc, 0x0f, 0xff, 0x00, 0x03, 0xff, 0x81, 0xff, 0xff, 0xfe, 0x00, 0x00, 
	0x01, 0xe0, 0x00, 0x00, 0x30, 0x30, 0x18, 0x00, 0x18, 0x04, 0x18, 0x06, 0x00, 0x00, 0x00, 0x18, 
	0x06, 0x00, 0x01, 0x00, 0xc0, 0x30, 0x08, 0x00, 0x60, 0x18, 0x00, 0x30, 0x0c, 0x0c, 0x03, 0x00, 
	0x06, 0x01, 0x81, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x18, 0x20, 0x18, 0x00, 
	0x10, 0x0c, 0x18, 0x06, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x03, 0x00, 0xc0, 0x30, 0x18, 0x00, 
	0x60, 0x18, 0x00, 0x30, 0x0c, 0x0c, 0x03, 0x00, 0x06, 0x01, 0x81, 0x80, 0x00, 0x03, 0x00, 0x00, 
	0x00, 0x0f, 0xfe, 0xff, 0xf8, 0x7f, 0xf8, 0x00, 0x3f, 0xfc, 0x1f, 0xf6, 0x00, 0x07, 0xff, 0x1f, 
	0xf6, 0x00, 0x03, 0xff, 0xc0, 0x3f, 0xf8, 0x00, 0x7f, 0xd0, 0x00, 0x3f, 0xe8, 0x0f, 0xfe, 0x00, 
	0x07, 0xfd, 0x81, 0xff, 0xef, 0xfd, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x7f, 0xf8, 0x00, 
	0x3f, 0xfc, 0x1f, 0xfc, 0x00, 0x07, 0xff, 0x1f, 0xfc, 0x00, 0x03, 0xff, 0x80, 0x7f, 0xf8, 0x00, 
	0x7f, 0xf0, 0x00, 0x7f, 0xf8, 0x0f, 0xfe, 0x00, 0x07, 0xff, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 
	0x7f, 0xf0, 0x01, 0xe0, 0x18, 0x60, 0x18, 0x00, 0x60, 0x0c, 0x18, 0x04, 0x00, 0x0c, 0x03, 0x18, 
	0x04, 0x00, 0x02, 0x01, 0x80, 0x60, 0x18, 0x00, 0x40, 0x30, 0x00, 0x60, 0x18, 0x08, 0x06, 0x00, 
	0x06, 0x03, 0x03, 0x00, 0x36, 0x00, 0xc0, 0x00, 0x7f, 0xf0, 0x00, 0x60, 0x18, 0x60, 0x18, 0x00, 
	0xe0, 0x08, 0x18, 0x04, 0x00, 0x0c, 0x03, 0x10, 0x04, 0x00, 0x06, 0x01, 0x80, 0x60, 0x18, 0x00, 
	0x40, 0x30, 0x00, 0xc0, 0x18, 0x18, 0x06, 0x00, 0x04, 0x03, 0x03, 0x00, 0x63, 0x00, 0x60, 0x00, 
	0xc0, 0x30, 0x00, 0x60, 0x18, 0x60, 0x18, 0x01, 0xc0, 0x08, 0x18, 0x06, 0x00, 0x1c, 0x02, 0x10, 
	0x06, 0x00, 0x0e, 0x01, 0x80, 0x60, 0x10, 0x00, 0xc0, 0x30, 0x01, 0x80, 0x18, 0x18, 0x06, 0x00, 
	0x0c, 0x03, 0x03, 0x00, 0xc1, 0x80, 0x60, 0x00, 0xc0, 0x30, 0x00, 0x60, 0x18, 0x60, 0x18, 0x03, 
	0x80, 0x18, 0x18, 0x06, 0x00, 0x38, 0x06, 0x18, 0x06, 0x00, 0x1c, 0x03, 0x00, 0x60, 0x30, 0x00, 
	0xc0, 0x18, 0x03, 0x00, 0x18, 0x18, 0x06, 0x00, 0x0c, 0x03, 0x03, 0x01, 0x81, 0x80, 0x30, 0x00, 
	0xc0, 0x1c, 0x01, 0xc0, 0x10, 0x60, 0x0f, 0xff, 0x00, 0x18, 0x18, 0x03, 0xff, 0xf0, 0x06, 0x18, 
	0x03, 0xff, 0xf8, 0x03, 0x00, 0x40, 0x30, 0x00, 0x40, 0x1f, 0xfe, 0x00, 0x10, 0x18, 0x04, 0x00, 
	0x0c, 0x03, 0x02, 0x01, 0x80, 0xc0, 0x30, 0x00, 0x40, 0x0f, 0xff, 0x80, 0x30, 0x60, 0x07, 0xfc, 
	0x00, 0x18, 0x18, 0x01, 0xff, 0xc0, 0x0c, 0x18, 0x01, 0xff, 0xe0, 0x03, 0x00, 0xc0, 0x30, 0x00, 
	0x40, 0x0f, 0xf8, 0x00, 0x30, 0x10, 0x0c, 0x00, 0x0c, 0x02, 0x06, 0x01, 0x80, 0xc0, 0x18, 0x00, 
	0x60, 0x00, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x18, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x30, 0x10, 0x0c, 0x00, 
	0x0c, 0x06, 0x06, 0x01, 0x80, 0x60, 0x0c, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 
	0x20, 0x10, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x30, 0x00, 
	0x60, 0x00, 0x00, 0x20, 0x30, 0x30, 0x0c, 0x00, 0x08, 0x06, 0x06, 0x01, 0x80, 0x30, 0x0c, 0x00, 
	0x30, 0x00, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 0x60, 0x30, 0x06, 0x00, 0x00, 0x00, 0x30, 0x0e, 
	0x00, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x20, 0x00, 0x30, 0x00, 0x00, 0x60, 0x30, 0x30, 0x0c, 0x00, 
	0x18, 0x06, 0x06, 0x01, 0x00, 0x30, 0x06, 0x00, 0x38, 0x00, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 
	0xe0, 0x30, 0x07, 0x00, 0x00, 0x00, 0x60, 0x07, 0x00, 0x00, 0x00, 0x38, 0x00, 0x80, 0x60, 0x00, 
	0x30, 0x00, 0x00, 0xe0, 0x30, 0x30, 0x08, 0x00, 0x18, 0x06, 0x06, 0x03, 0x00, 0x18, 0x06, 0x00, 
	0x1c, 0x00, 0x00, 0x03, 0x80, 0x0c, 0x00, 0x01, 0xe0, 0x30, 0x03, 0x80, 0x00, 0x00, 0xc0, 0x03, 
	0x80, 0x00, 0x00, 0x70, 0x01, 0x80, 0x60, 0x00, 0x18, 0x00, 0x03, 0xc0, 0x20, 0x30, 0x08, 0x00, 
	0x18, 0x06, 0x04, 0x03, 0x00, 0x18, 0x03, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x0e, 0x00, 0x07, 
	0x60, 0x30, 0x01, 0xe0, 0x00, 0x03, 0x80, 0x01, 0xe0, 0x00, 0x01, 0xc0, 0x01, 0x80, 0x60, 0x00, 
	0x0e, 0x00, 0x07, 0xc0, 0x60, 0x20, 0x18, 0x00, 0x18, 0x04, 0x0c, 0x03, 0x00, 0x0c, 0x01, 0x80, 
	0x03, 0xe0, 0x00, 0xfc, 0x00, 0x03, 0xc0, 0x1e, 0x7f, 0xf0, 0x00, 0x7c, 0x00, 0x3f, 0x00, 0x00, 
	0x7c, 0x00, 0x1f, 0x80, 0x01, 0xff, 0xe0, 0x00, 0x07, 0xc0, 0x1e, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 
	0x1f, 0xfc, 0x0f, 0xff, 0x00, 0x07, 0xff, 0x80, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf8, 
	0x7f, 0xe0, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xc0, 0x00, 
	0x01, 0xff, 0xf8, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0x1f, 0xfc, 0x0f, 0xfe, 0x00, 0x07, 0xff, 0xc0, 
	0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// --- SUCOFUNK Logo Subline "beatmaker's sketchbook" / 320x11px
const unsigned char startup_logo_subline [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x80, 0x00, 0x30, 0x02, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
	0x00, 0x01, 0x80, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x03, 0xf0, 0x3e, 0x0f, 0x83, 0xfe, 0x07, 0xe0, 0xcc, 0x1f, 
	0x03, 0xc0, 0x07, 0xc0, 0x00, 0x03, 0xe0, 0xcc, 0x1f, 0x83, 0xc1, 0xf0, 0x3f, 0x03, 0xf0, 0x3e, 
	0x07, 0xe0, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x82, 0x10, 
	0x42, 0x06, 0x06, 0x33, 0x04, 0x60, 0xd8, 0x31, 0x83, 0x00, 0x0c, 0x40, 0x00, 0x06, 0x20, 0xd8, 
	0x11, 0x81, 0x03, 0x18, 0x31, 0x06, 0x30, 0x63, 0x04, 0x20, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x86, 0x30, 0x12, 0x04, 0x06, 0x22, 0x03, 0x60, 0xf0, 0x31, 
	0x82, 0x00, 0x0c, 0x00, 0x00, 0x06, 0x00, 0xf0, 0x31, 0x83, 0x03, 0x00, 0x21, 0x06, 0x30, 0x43, 
	0x0c, 0x20, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x07, 0xf0, 
	0x7e, 0x04, 0x06, 0x62, 0x0f, 0xe0, 0xf0, 0x3f, 0x82, 0x00, 0x07, 0xc0, 0x00, 0x03, 0xc0, 0xf0, 
	0x3f, 0x83, 0x02, 0x00, 0x63, 0x04, 0x30, 0xc2, 0x08, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x04, 0x00, 0xc6, 0x04, 0x04, 0x62, 0x08, 0x40, 0x90, 0x20, 
	0x06, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x60, 0x90, 0x20, 0x03, 0x02, 0x10, 0x63, 0x04, 0x30, 0xc2, 
	0x08, 0x60, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x06, 0x20, 
	0xce, 0x04, 0x04, 0x66, 0x0c, 0xc1, 0x98, 0x33, 0x06, 0x00, 0x08, 0xc0, 0x00, 0x0c, 0x61, 0x98, 
	0x33, 0x03, 0x03, 0x30, 0x43, 0x06, 0x60, 0xc6, 0x0c, 0xc0, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x03, 0xc0, 0x7c, 0x07, 0x04, 0x46, 0x0f, 0xc1, 0x88, 0x1e, 
	0x04, 0x00, 0x0f, 0x80, 0x00, 0x07, 0xc1, 0x88, 0x1e, 0x03, 0x81, 0xe0, 0x42, 0x07, 0xc0, 0x7c, 
	0x07, 0x81, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
  Serial.begin(57600);

  boolean ok = true;
  //strcpy(activeSongPath, songsBasePath); // init main path.. song directory will be concatenated, when available  

  // Screeen Backlight regulator -> make screen dark
  pinMode(PIN_SCREEN_BL, OUTPUT);
  analogWrite(PIN_SCREEN_BL, 1); 

  // initialize screen

#ifdef SCREEN_ILI9341
  tft.begin();
  tft.setRotation(1);  
#endif 


#ifdef SCREEN_ILI9341_DMA
  tft.begin();
  tft.setRotation(1);  
#endif 


#ifdef SCREEN_ST7789
  tft.init(240, 320, SPI_MODE0);
  tft.setRotation(3);
#endif

  tft.fillScreen(screen.C_STARTUP_BG);

  screen.fadeBacklightIn(1);

  // fade logo in..
  for (int c=3; c<=370; c=c/3 + c) {   
    tft.drawBitmap(0, 86, startup_logo, 320, 54, screen.RGBtoColor(c > 255?255:c, c > 255?255:c, c > 255?255:c));    
    delay(20);
  };

  startupContext.showMessage(VERSIONNUMBER, false);

  // draw orange subline "beatmaker's sketchbook"
  tft.drawBitmap(0, 155, startup_logo_subline, 320, 11, screen.C_ORANGE);
  delay(1000);

  currentAppContext = AppContext::STARTUP;
  
  startupContext.showMessage("system health check", false);

  keyboard.setBank(0);

  AudioMemoryUsageMaxReset();
  AudioMemory(100);
  
  // Enable the audio shield, select input and enable output
  audioResources.audioShield.enable();

  keyboard.setInput(Sucofunkey::INPUT_NONE);
  audioResources.muteInput();
  audioResources.muteResampling();
  audioResources.audioShield.volume(volumeValue);  //0.0-1.0 0.8=max without distortion

  // erase psram (sample memory)
  for (unsigned long i=0; i<sizeof(extmemArray)/4; i++) {
    extmemArray[i] = 0;
  }

  delay(300); // small delay for better readability on screen

  // enable SD card
  if (!(SD.begin(BUILTIN_SDCARD))) {    
      startupContext.showMessage("SD card not available", true);
      ok = false;
  } else {
      // create temp directories, if they do not already exist
      if (!SD.exists("/TEMP")) {
        SD.mkdir("/TEMP");
      } 

      if (!SD.exists("/TEMP/PATTERN")) {
        SD.mkdir("/TEMP/PATTERN");
      } 

      // save the empty song structure (as at this state no song is selected) to /TEMP on the SD card
      // this way there is always the latest data structure available
      sequencerContext.saveTemp();

      startupContext.showMessage("OK", false);
  }

  // start globalTickInterval Timer
  globalTickTimer.begin(globalTick, globalTickInterval);
  globalTickTimerRec.begin(globalTickRec, globalTickIntervalRec);

  fsio.readLibrarySamplesFromSD(librarySamples, "/SAMPLES");

  delay(300); // small delay for better readability on screen
  
  if (ok) {
    startupContext.transitionToSelection(); // show song collection
  }

  MIDI.begin(MIDI_CHANNEL_OMNI);
  Serial.println("setup done");
  // remove before flight... just for testing, if soldering worked and did not fry the MCPs
  //keyboard.scanI2C();
}


void sendEventToActiveContext(Sucofunkey::keyQueueStruct event) {
  switch(currentAppContext) {
    case AppContext::HOME: 
            homeContext.handleEvent(event);
            break;
    case AppContext::SAMPLER:
            samplerContext.handleEvent(event);
            break;
    case AppContext::SEQUENCER:
            sequencerContext.handleEvent(event);
            break;
//    case AppContext::SYNTH:
//            synthContext.handleEvent(event);
//            break;
    case AppContext::ARRANGE:
            arrangeContext.handleEvent(event);
            break;
    case AppContext::LIVE:
            liveContext.handleEvent(event);
            break;
    case AppContext::SETTINGS:
              settingsContext.handleEvent(event);
            break;
    case AppContext::STARTUP:
            startupContext.handleEvent(event);
            break;
    case AppContext::RECORDER:
            recorderContext.handleEvent(event);
            break;
    case AppContext::SYSTEMCHECK:
            systemCheckContext.handleEvent(event);
            break;
    case AppContext::SYNTHCOPY:
            synthCopyContext.handleEvent(event);
            break;            
    default:
            break;
  }
}

// --- START Timing ---

void globalTick() {
  ticked = true;
}

void globalTickRec() {
  tickedRec = true;
}


void sendTickToActiveContext() {
  switch(currentAppContext) {
    case  AppContext::HOME:
           globalTickIntervalNew = homeContext.receiveTimerTick();
          break;
    case  AppContext::SAMPLER:
           globalTickIntervalNew = samplerContext.receiveTimerTick();
          break;
    case  AppContext::SEQUENCER:
           globalTickIntervalNew = sequencerContext.receiveTimerTick();
          break;
    case  AppContext::STARTUP:
           globalTickIntervalNew = startupContext.receiveTimerTick();
          break;
    case  AppContext::SYSTEMCHECK:
           globalTickIntervalNew = systemCheckContext.receiveTimerTick();
          break;
    case  AppContext::ARRANGE:
          globalTickIntervalNew = arrangeContext.receiveTimerTick();
          break;
    case  AppContext::LIVE:
          globalTickIntervalNew = liveContext.receiveTimerTick();
          break;
    case  AppContext::SYNTHCOPY:
          globalTickIntervalNew = synthCopyContext.receiveTimerTick();
          break;          
    default:
          break;
  }    

//  globalTickIntervalNew = sequencerContext.receiveTimerTick();

  if (globalTickIntervalNew != globalTickInterval) {
    globalTickInterval = globalTickIntervalNew;
    globalTickTimer.update(globalTickInterval);
  }
}

// --- END Timing ---

int z = 0;
int zz = 0;


void loop() {  
  // recording? -> has highest priority -> store record buffer to sd..
  if (recorderContext.currentState == recorderContext.RECORDER_RECORDING) recorderContext.continueRecording();
  z++;
  zz++;

  // handle encoder and keyboard events.. but divide reading PIN changes and handling the events into two loops to not disrupt recording
  // 1. Checks if a PIN changed (Key pressed, released or encoder state change) and adds it to the event queue
  if (z == 1) keyboard.hasKeyPressed();
  // 2. Reads the event queue and handles the occured event -> propagating to the right context
  if (z == 2) { 
    handleKeyboardEventQueue();
    z = 0;  
  }
  // On every 200th loop, check if the volume potentiometer was changed and adjust the volume.
  if (zz == 20) {    
    volumeTempValue = 0.8-((analogRead(PIN_VOLUME)/1023.0)*0.8);

    if (abs(volumeValue-volumeTempValue) > 0.05) {
      volumeValue = volumeTempValue;
      audioResources.audioShield.volume(volumeValue);
    }    
    
    zz = 0;
  }

  // timer handling while recording to update the peak meter of the input
  if (tickedRec) {
    tickedRec = false;
    globalTickIntervalRecNew = recorderContext.receiveTimerTick();
    
    if (globalTickIntervalRecNew != globalTickIntervalRec) {
      globalTickIntervalRec = globalTickIntervalRecNew;
      globalTickTimerRec.update(globalTickIntervalRec);
    }  
  }

  // handle timer and delegate it to the current active context (e.g. sampler, sequencer, ...)
  if (ticked) {
    ticked=false;
    sendTickToActiveContext();
  }

  // update fader reading queue
  keyboard.updateContinuousFaderValue();

  if (MIDI.read()) { 
    // route midi messages for MIDI_channel_Synth and system messages to the synth

//    Serial.println(currentAppContext);
//    Serial.println(MIDI.getChannel());

    if (MIDI.getChannel() == MIDI_channel_Live || MIDI.getChannel() == MIDI_channel_Piano) {
      liveContext.receiveMidiData(MIDI.getChannel(), MIDI.getType(), MIDI.getData1(), MIDI.getData2());
    }
  }
}


void changeContext(AppContext context) {    
    screen.fadeBacklightOut(1);
    
    homeContext.setActive(false);
    samplerContext.setActive(false);

    if (currentAppContext == SEQUENCER && sequencerContext.isPlaying() && context == SAMPLER) {
      // warning?
      // or fix it with two seperated timers.. but maybe we need them later for something else..
    } 
    else {
      sequencerContext.setActive(false);
    }
        
    arrangeContext.setActive(false);
    liveContext.setActive(false);
    settingsContext.setActive(false);
    recorderContext.setActive(false);
    synthCopyContext.setActive(false);

    // save to context we are currently in, to switch back to it, if e.g. RECORDER_CANCEL happens
    lastAppContext = currentAppContext;

    switch (context) {
      case  AppContext::HOME: 
                  homeContext.setActive(true);
                  currentAppContext = HOME;
                  break;
      case  AppContext::SAMPLER: 
                  if (!recorderContext.isRecording() && !sequencerContext.isPlaying()) {
                    samplerContext.setActive(true);
                    currentAppContext = SAMPLER;
                  }                  
                  break;
      case  AppContext::SEQUENCER: 
                  sequencerContext.setActive(true);
                  currentAppContext = SEQUENCER;
                  break;
/*      case  AppContext::SYNTH: 
                  synthContext.setActive(true);
                  currentAppContext = SYNTH;
                  break; */
      case  AppContext::ARRANGE: 
                  arrangeContext.setActive(true);
                  currentAppContext = ARRANGE;
                  break;
      case  AppContext::LIVE: 
                  liveContext.setActive(true);
                  currentAppContext = LIVE;
                  break;
      case  AppContext::SETTINGS: 
                  settingsContext.setActive(true);
                  currentAppContext = SETTINGS;
                  break;                  
      case  AppContext::RECORDER: 
                  recorderContext.setActive(true);
                  currentAppContext = RECORDER;
                  break;                  
      case AppContext::SYSTEMCHECK:
                  systemCheckContext.setActive(true);
                  currentAppContext = SYSTEMCHECK;
                  break;
      case AppContext::SYNTHCOPY:
                  synthCopyContext.setActive(true);
                  currentAppContext = SYNTHCOPY;  
                  break;
      default: 
                  break;                  
    }    

    if (!screen.isBacklightOn()) screen.fadeBacklightIn(10);
}

void handleKeyboardEventQueue() {
  bool preCheck = false; // did we already process a key press in a "precondition", e.g. go to main menu?

  while(keyboard.hasEvents()) {
    Sucofunkey::keyQueueStruct event = keyboard.getNextEvent();

//    Serial.print("MaxAudioMemoryUsed:: ");
//    Serial.println(AudioMemoryUsageMax());

    // global events - not necessarily connected to a specific context

    if (event.type == Sucofunkey::EVENT_APPLICATION) {
      switch(event.index) {
        case Sucofunkey::SONGSELECTED:
          // generate new _activeSongPath after selecting or creating a song
          strcpy(activeSongPath, songsBasePath);
          strcat(activeSongPath, activeSongName);
          sfsio.setSongPath(activeSongPath);                    
          sfsio.clearSampleMemory();
          screen.loadingScreen(0.0);
          sfsio.writeAllSamplesToWaveformBuffer();

          // load sample infos
          sfsio.loadSampleInfosFromSD();

          // load empty temp project to have a clean song in memory..
          sequencerContext.loadTemp();

          // .. and override it with sequencer data from SD card, if available.
          sequencerContext.loadFromSD(false);

          changeContext(AppContext::HOME);
          break;

        case Sucofunkey::RECORDED:
          changeContext(AppContext::SAMPLER);
          break;

        case Sucofunkey::RECORDER_CANCEL:
          changeContext(lastAppContext);
          break;

        case Sucofunkey::CHECKREQUEST:
          changeContext(AppContext::SYSTEMCHECK);
          break;

        case Sucofunkey::MIDI_SEND_NOTE_ON:
          // data1 = NOTE, data2 = VELOCITY, data3 = CHANNEL
          MIDI.sendNoteOn(event.data1, event.data2, event.data3);
          break;

        case Sucofunkey::MIDI_SEND_NOTE_OFF:
          // data1 = NOTE, data2 = VELOCITY, data3 = CHANNEL
          MIDI.sendNoteOff(event.data1, 0, event.data3);
          break;

        case Sucofunkey::MIDI_SEND_ALL_NOTE_OFF:
          // data3 = CHANNEL
          MIDI.sendControlChange(123, 123, event.data3);
          break;

        case Sucofunkey::MIDI_SEND_ALL_NOTE_OFF_ALL_CHANNELS:
          for (byte i=1; i<=16; i++) {
            MIDI.sendControlChange(123, 123, i);
          }
          break;

        case Sucofunkey::CHANGE_CONTEXT_TO_SYNTHCOPY:
          changeContext(SYNTHCOPY);
          break;

        default:
          break;
      }      
    }

    // Encoder pushed -> with MENU in every context: change context .. in home screen the same without FN OR Main menu OR Settings
    if (currentAppContext!=STARTUP && currentAppContext!=SYSTEMCHECK && event.pressed && (event.type == Sucofunkey::KEY_MENU_OPERATION || (currentAppContext == AppContext::HOME && event.type == Sucofunkey::KEY_OPERATION) || event.index == Sucofunkey::FN_FUNCTION || event.index == Sucofunkey::MENU_MENU)) {
      switch (event.index) {
        case Sucofunkey::ENCODER_1_PUSH:  
        case Sucofunkey::MENU_ENCODER_1_PUSH:  
              changeContext(SAMPLER);
              preCheck = true;
              break;
        case Sucofunkey::ENCODER_2_PUSH:
        case Sucofunkey::MENU_ENCODER_2_PUSH:          
              changeContext(SEQUENCER);
              preCheck = true;
              break;             
        case Sucofunkey::ENCODER_3_PUSH:  
        case Sucofunkey::MENU_ENCODER_3_PUSH:        
              changeContext(ARRANGE);
              preCheck = true;
              break; 
        case Sucofunkey::ENCODER_4_PUSH:
        case Sucofunkey::MENU_ENCODER_4_PUSH:          
              changeContext(LIVE);
              preCheck = true;
              break;
        case Sucofunkey::FN_FUNCTION:  
              changeContext(SETTINGS);
              preCheck = true;
              break;
        case Sucofunkey::MENU_MENU:  
              changeContext(HOME);
              preCheck = true;
              break;
      }
    }

    if (!preCheck && currentAppContext != STARTUP && currentAppContext != SYSTEMCHECK && (event.type == Sucofunkey::KEY_OPERATION || event.index == Sucofunkey::ROUTE_LINE_IN_THROUGH)) {    
      
      // Intention to start recording..
      if (event.index == Sucofunkey::RECORD && event.pressed) { 
        if (currentAppContext != RECORDER && !recorderContext.isRecording()) {                    
          changeContext(RECORDER);
          preCheck = true;
        }
        if (currentAppContext != RECORDER && recorderContext.isRecording()) {          
          recorderContext.stopRecording();
          preCheck = true;
        }
      }

      // change input from everywhere..
      if ((event.index == Sucofunkey::INPUTSELECTOR || event.index == Sucofunkey::ROUTE_LINE_IN_THROUGH) && event.pressed) { 
        if (currentAppContext == RECORDER && event.index != Sucofunkey::ROUTE_LINE_IN_THROUGH) {
            // in record mode, all inputs are available
            keyboard.toggleInput();
        } 
        else {
            // outside of recording, only line in pass-through is allowed (prevent feedback noise from mic)
            if (keyboard.getInput() != Sucofunkey::INPUT_NONE && event.index != Sucofunkey::ROUTE_LINE_IN_THROUGH) {
              keyboard.setInput(Sucofunkey::INPUT_NONE);
            } else {
              keyboard.setInput(Sucofunkey::INPUT_LINE);
            }            
        }
        recorderContext.activateInput();
      }

    }

    if (!preCheck) {
      sendEventToActiveContext(event);
    }   
  }
}